name: Build and Push Docker Image

on:
  push:
    branches:
      - main
      - main_sunnchao
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - main_sunnchao
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # 构建前端并推送到 web-dist 分支
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/admin-spa/package-lock.json

      - name: Build Frontend
        run: |
          echo "Building frontend..."
          cd web/admin-spa
          npm ci
          npm run build
          echo "Frontend build completed"

      - name: Push Frontend Build to web-dist Branch
        if: github.event_name != 'pull_request'
        run: |
          # 创建临时目录
          TEMP_DIR=$(mktemp -d)
          echo "Using temp directory: $TEMP_DIR"

          # 复制构建产物到临时目录
          cp -r web/admin-spa/dist/* "$TEMP_DIR/"

          # 配置git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 检查 web-dist 分支是否存在
          if git ls-remote --heads origin web-dist | grep -q web-dist; then
            echo "Checking out existing web-dist branch"
            git fetch origin web-dist:web-dist
            git checkout web-dist
          else
            echo "Creating new web-dist branch"
            git checkout --orphan web-dist
          fi

          # 清空当前目录（保留 .git）
          git rm -rf . 2>/dev/null || true

          # 复制构建产物
          cp -r "$TEMP_DIR"/* .

          # 添加 README
          cat > README.md << EOF
          # Claude Relay Service - Web Frontend Build

          This branch contains the pre-built frontend assets for Claude Relay Service.

          **DO NOT EDIT FILES IN THIS BRANCH DIRECTLY**

          These files are automatically generated by the CI/CD pipeline.

          Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          EOF

          # 创建 .gitignore 文件以排除 node_modules
          cat > .gitignore << EOF
          node_modules/
          *.log
          .DS_Store
          .env
          EOF

          # 只添加必要的文件，排除 node_modules
          git add --all -- ':!node_modules'
          git commit -m "chore: update frontend build from ${{ github.ref_name }} [skip ci]" || echo "No changes to commit"

          # 只在有更改时推送
          if git diff-index --quiet HEAD~1 2>/dev/null; then
            echo "No changes detected, skipping push"
          else
            git push origin web-dist --force
            echo "Frontend build pushed to web-dist branch successfully"
          fi

          # 切换回原分支
          git checkout -

          # 清理临时目录
          rm -rf "$TEMP_DIR"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # 默认标签
            type=ref,event=branch
            type=ref,event=pr

            # 语义版本标签 (例如: v1.4.0)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

            # 使用 git sha
            type=sha,prefix={{branch}}-,format=short

            # 为主分支设置 latest 标签
            type=raw,value=latest

            # 自定义日期标签
            type=raw,value={{date 'YYYYMMDD'}}
          flavor: |
            latest=false

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            BUILD_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            BUILD_REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Generate artifact attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Print image info
        if: github.event_name != 'pull_request'
        run: |
          echo "## Docker Image Published! 🐳" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY